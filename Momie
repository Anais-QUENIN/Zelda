package zelda.enemies;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

import com.golden.gamedev.Game;
import com.golden.gamedev.object.Sprite;
import com.golden.gamedev.object.SpriteGroup;
import com.golden.gamedev.object.Timer;
import com.golden.gamedev.object.collision.AdvanceCollisionGroup;

import zelda.Orientation;
import zelda.Zelda;
import zelda.enemies.ennemies.EnnemiesCollisionManager;
import zelda.scenary.Board;
import zelda.scenary.Quest;

public class Momie extends ennemies {
	
	private Quest quest;
	
	protected Projectile_Momie projectile;
	
	public Momie(Zelda game) {
        this.setGame(game);
        this.getAnimationTimer().setDelay(ennemies.ANIMATION_DELAY);
        this.figth = new Timer(ennemies.FIGHT_TIMER);
        this.figth.setActive(false);
        this.SPEED = 0.1; // lentement
        this.orientation=Orientation.SOUTH;
        this.manager = new EnnemiesCollisionManager();
        this.life = 5; // admettons
        this.initResources();
    }
	
	public Orientation getOrientation() {
    	return this.orientation;
    }
	
	public Projectile_Momie getProj() {
		return projectile;
	}
	
	

	private void initResources() {
        BufferedImage[] sprites = new BufferedImage[4];
        sprites[0] = getGame().getImage("res/sprites/Ennemies/momie_d.png");
        sprites[1] = getGame().getImage("res/sprites/Ennemies/momie_g.png");
        this.setImages(sprites);
        this.setLocation(300, 380); // mettre une autre location, pas la même que link..
        this.setAnimationFrame(0, 0);
    }
	
/*	public void setBoard(Board board) {
        SpriteGroup garde = new SpriteGroup("GARDE SPRITE GROUPE");
        garde.add(this);
        this.manager.setCollisionGroup(garde, board.getForeground());
    } */
	
	
	
	public void update(long elapsedTime) {
        super.update(elapsedTime);
        if (this.figth.action(elapsedTime)) {
            this.figth.setActive(false); }
        
    /*     Orientation [] tabor = new Orientation[] {Orientation.WEST, Orientation.NORTH};
         int indice =  (int) (1 + (Math.random() * 2) - 1);
 		 this.orientation =tabor[indice];  */
         
           
            if (this.orientation.equals(Orientation.NORTH)) {
                this.setY(this.getY() + 15);
                this.setAnimationFrame(0, 1);
             
            }
        /*    } else if (this.orientation.equals(Orientation.SOUTH)) {
                this.setY(this.getY() - 15);
                this.setAnimationFrame(1, 2);
            } */
            
            else if (this.orientation.equals(Orientation.WEST)) {
                this.setX(this.getX() + 15);
                this.setAnimationFrame(0, 1);
             
            } 
            
         /*   else if (this.orientation.equals(Orientation.EAST)) {
                this.setX(this.getX() - 15);
                this.setAnimationFrame(1, 2);
            } */
        
        if (this.manager != null) 
            this.manager.checkCollision();
    }
	

	 public void render(Graphics2D g) {
	        super.render(g);
	       
	    }
	 
/*	 private class MomieCollisionManager extends AdvanceCollisionGroup {
		 
	        public MomieCollisionManager() {
	            this.pixelPerfectCollision = false;
	        }
	        
	        @Override
	    	public void collided(Sprite arg0, Sprite arg1) {
	    		// TODO Auto-generated method stub
	        	this.revertPosition1();
	    	}
	*/
	
	
//	@Override
	/*public void fight() {
		// TODO Auto-generated method stub
		// le garde n'a pas de méthode de combat, il fait des dégat à link on ayant une collision avec lui 
		
	} */


	 

	@Override
	public void fight() {
		// TODO Auto-generated method stub
		
		int indice=(int) (1 + (Math.random() * (4 - 1)));
		Orientation [] dir= {Orientation.SOUTH, Orientation.NORTH, Orientation.WEST, Orientation.EAST};
		Orientation or=dir[indice];
		this.projectile= new Projectile_Momie(this.game, or, this.getX(),this.getY());
		this.projectile.setBoard(this.quest.getCurrentBoard());
		projectile.shoot(or);
		
	}
	
	
	

}

