package zelda;

import com.golden.gamedev.object.CollisionManager;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;

import zelda.enemies.ennemies;
import zelda.scenary.Quest;
import zelda.scenary.Rock;


import com.golden.gamedev.Game;
import com.golden.gamedev.GameLoader;
import com.golden.gamedev.object.Sprite;
import com.golden.gamedev.object.SpriteGroup;
import com.golden.gamedev.object.collision.AdvanceCollisionGroup;

public class Zelda extends Game {
    
    private Link link;
   
    private Quest quest;
    
    private ennemies goblin;
    
    private boolean menu;
    private CollisionManager manager;
    
    public Zelda() {
        
    }
    private Rock rock;
    
    
    public void initResources() {
        this.quest = new Quest(this);
        this.link = new Link(this);
        this.goblin= new zelda.enemies.goblin(this);
        this.link.setBoard(this.quest.getCurrentBoard());  
        
        this.goblin.setBoard(this.quest.getCurrentBoard());
        if (((zelda.enemies.goblin) this.goblin).getProj()!=null) {
        	((zelda.enemies.goblin) this.goblin).getProj().setBoard(this.quest.getCurrentBoard());
        }
        SpriteGroup playerGroup = new SpriteGroup("playerGroup");
        playerGroup.add(link);

        SpriteGroup enemyGroup = new SpriteGroup("enemyGroup");
        enemyGroup.add(goblin);
        this.manager =new PlayerEnnemiesCollisionManager();
        manager.setCollisionGroup(playerGroup,enemyGroup);
    }
    
    private class PlayerEnnemiesCollisionManager extends AdvanceCollisionGroup {
        public PlayerEnnemiesCollisionManager() {
            this.pixelPerfectCollision = false;
        }
        
        public void collided(Sprite s1, Sprite s2) {
            
     
        
            this.revertPosition1();
        }
    }
    
    public Boolean SortTableau() {
    	if (this.link.getX()<0 || this.link.getX()>672 || this.link.getY()<126 || this.link.getY()>588) {
    	return true;
    	}else return false;
    }
        
    public void update(long elapsedTime) {
        if (this.keyPressed(KeyEvent.VK_ALT)) {
            this.link.fight();
        } else if (this.keyDown(KeyEvent.VK_LEFT)) {
            this.link.walk(Orientation.WEST);
        } else if (this.keyDown(KeyEvent.VK_RIGHT)) {
            this.link.walk(Orientation.EAST);
        } else if (this.keyDown(KeyEvent.VK_UP)) {
            this.link.walk(Orientation.NORTH);
        } else if (this.keyDown(KeyEvent.VK_DOWN)) {
            this.link.walk(Orientation.SOUTH);
        }  else if (this.keyDown(KeyEvent.VK_Q)) {
                this.goblin.gauche();
            } else if (this.keyDown(KeyEvent.VK_D)) {
                this.goblin.droite();
            } else if (this.keyDown(KeyEvent.VK_Z)) {
                this.goblin.haut();
            } else if (this.keyDown(KeyEvent.VK_S)) {
                this.goblin.bas();
            }else if (this.keyDown(KeyEvent.VK_SPACE)) {
            	this.goblin.fight();
        } else if (keyPressed(KeyEvent.VK_ESCAPE)) {
            finish();
        } else {
            this.link.setSpeed(0, 0);
            this.goblin.setSpeed(0,0);
        }
        this.quest.update(elapsedTime);
        this.link.update(elapsedTime);
        this.goblin.update(elapsedTime);
        if(((zelda.enemies.goblin) this.goblin).getProj()!=null) {
        ((zelda.enemies.goblin) this.goblin).getProj().update(elapsedTime);}
        if(this.SortTableau()) {
        	
        	System.out.println(quest.getX() + "," + quest.getY());
        	System.out.println(link.getX() + "," + link.getY() + ": " + SortTableau());
        	switch(this.link.getOrientation()) {
        	case WEST:
        		this.link.setLocation(671, this.link.getY());
        		this.quest.changeBoard(this.quest.getX()-1, this.quest.getY());
        		break;
        	case EAST:
        		this.link.setLocation(1, this.link.getY());
        		this.quest.changeBoard(this.quest.getX()+1, this.quest.getY());
        		break;
        	case NORTH:
        		this.link.setLocation(this.link.getX(),587);
        		this.quest.changeBoard(this.quest.getX(), this.quest.getY()-1);
        		break;
        	case SOUTH:
        		this.link.setLocation(this.link.getX(),137);
        		this.quest.changeBoard(this.quest.getX(), this.quest.getY()+1);
        		break;
        	}
        	this.link.setBoard(this.quest.getCurrentBoard());
        }
        manager.checkCollision();
     
    }

    public void render(Graphics2D g) {
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        this.quest.render(g);
        this.link.render(g);
        this.goblin.render(g);
        if(((zelda.enemies.goblin) this.goblin).getProj()!=null) {
        	((zelda.enemies.goblin) this.goblin).getProj().render(g);
        }
        
    }
    
    
    
    
    public static void main(String[] args) {
        GameLoader game = new GameLoader();
        game.setup(new Zelda(), new Dimension(672,588), false);
        game.start();
    }
    
}
