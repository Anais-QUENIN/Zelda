package zelda.scenary;

import java.awt.Graphics2D;
import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.nio.file.Paths;
import java.util.List;

import zelda.Zelda;
import zelda.enemies.Crabe;
import zelda.enemies.Ennemies;
import zelda.enemies.Flamme;
import zelda.enemies.Garde;
import zelda.enemies.Goblin;
import zelda.enemies.Mage;
import zelda.enemies.Momie;
import zelda.enemies.Octo;

import com.golden.gamedev.object.PlayField;
import com.golden.gamedev.object.Sprite;

public class Quest extends PlayField {
    
    private Zelda game;
    
    private Board[][] boards;
    
    private List<Ennemies> [][] ennemies;
    
    private QuestMenu menu;
    
    private Path[] chemins;
    
    private int x,y;
    
    public Quest(Zelda game) {
        super();
        this.game = game;
        this.boards = new Board[3][3];
        this.initRessources();
        ennemies = new List[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                ennemies[i][j] = new ArrayList<Ennemies>();
            }
        }
        ennemies[0][1].add(new Crabe(this.game,256 , 250));
        ennemies[0][1].add(new Crabe(this.game,256 ,300));
        ennemies[0][1].add(new Crabe(this.game,256 , 450));
        ennemies[0][2].add(new Crabe(this.game,256 , 300));
        ennemies[0][2].add(new Crabe(this.game,256 , 450));
        ennemies[0][2].add(new Octo(this.game,120 , 320));
        ennemies[0][2].add(new Octo(this.game,250 , 400));
        ennemies[1][0].add(new Garde(this.game,400 , 400));
        ennemies[1][0].add(new Garde(this.game,100 , 400));
        ennemies[1][0].add(new Momie(this.game,256 , 380));
        ennemies[1][1].add(new Goblin(this.game,256 , 380));
        ennemies[1][1].add(new Garde(this.game,400 , 400));
        ennemies[1][1].add(new Garde(this.game,100 , 400));
        ennemies[1][1].add(new Goblin(this.game,256 , 250));
        ennemies[1][2].add(new Mage(this.game,256 , 380));
        ennemies[1][2].add(new Momie(this.game,400 , 400));
        ennemies[1][2].add(new Crabe(this.game,256 , 250));
        ennemies[1][2].add(new Mage(this.game,300 , 380));
        ennemies[2][0].add(new Octo(this.game,256 , 380));
        ennemies[2][0].add(new Momie(this.game,400 , 400));
        ennemies[2][0].add(new Garde(this.game,256 , 250));
        ennemies[2][0].add(new Flamme(this.game,300 , 380));
        ennemies[2][1].add(new Mage(this.game,256 , 380));
        ennemies[2][1].add(new Goblin(this.game,400 , 400));
        ennemies[2][1].add(new Garde(this.game,256 , 250));
        ennemies[2][1].add(new Goblin(this.game,300 , 380));
        ennemies[2][2].add(new Mage(this.game,256 , 380));
        ennemies[2][2].add(new Mage(this.game,400 , 400));
        ennemies[2][2].add(new Garde(this.game,256 , 250));
        ennemies[2][2].add(new Garde(this.game,300 , 380));
        ennemies[2][2].add(new Flamme(this.game,300 , 400));
        ennemies[2][2].add(new Flamme(this.game,450 , 400));
        ennemies[2][2].add(new Flamme(this.game,300 , 250));
        
        }
    

    private void initRessources()  {
      this.menu = new QuestMenu(this.game);
        
       
     this.chemins= new Path[]{Paths.get("Haut_Gauche.txt"), Paths.get("Haut_Milieu.txt"), Paths.get("Haut_Droit.txt"), Paths.get("Milieu_Gauche.txt"), Paths.get("Milieu_Milieu.txt"), Paths.get("Milieu_Droit.txt"), Paths.get("Bas_Gauche.txt"), Paths.get("Bas_Milieu.txt"), Paths.get("Bas_Droit.txt")};
        
     for (int j=0; j<3; j++) {
    	 for(int i=0; i<3; i++) {
    	Path p1=chemins[j*3+i];
    	Board board= new Board(this.game,i,j);

		BufferedReader in = null;

	 try {
		 System.out.println(i+","+j+p1.toAbsolutePath());
	 // Ouverture d'un flux en lecture depuis
	 // le fichier désigné par le chemin f1
	 in = Files.newBufferedReader(p1);
	 

	
	 int c;
	 // si le caractère lu est égale à -1 alors on a atteint
	 // la fin du flux (i.e. la fin du fichier)
	 // la méthode read retourne un entier borné entre 0 et 255(i.e. un octet)
	 while ((c = in.read()) != -1) {
		 System.out.print((char)c);
		 switch(c) {
		 	case 'x': board.add(new Rock(this.game, Rock.Kind.GREEN_PLAIN)); //rocher
		 	break;
		 	case '.': board.add(new Floor(this.game, Floor.Color.SAND)); //sol
		 	break;
		 	case '/': board.add(new Rock(this.game, Rock.Kind.GREEN_SOUTH_EAST_CORNER));//rocher sud est
		 	break;
		 	case '\\': board.add(new Rock(this.game, Rock.Kind.GREEN_SOUTH_WEST_CORNER));//rocher sud ouest
		 	break;
		 	case 'M': board.add(new Rock(this.game, Rock.Kind.GREEN_INDENTED));//rocher nord
		 	break;
		 }
	 
	 }
	 }
	 catch (Exception e) { // ancienne API : FileNotFoundException
	 System.err.println("le fichier "+p1+" n'existe pas");
	 e.printStackTrace();
	 }
	 // Les autres Exceptions de type IOException ne sont pas
	 // gérées ici : la méthode main est déclarée throws IOException
	 finally {
	 if (in != null) {
	 try {
		in.close();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	 
	 }
	
	 }
        
        this.add(board);
        }}
     this.x=0;
     this.y=0;
        
    }
    
    
    public Board getCurrentBoard() {
        return this.boards[x][y];
    }
    
    public int getX() {
    	return this.x;
    }
    
    public int getY() {
    	return this.y;
    }
    
    public void changeBoard(int x, int y) {
    	this.x=x;
    	this.y=y;
    }
    
    public void add(Board board) {
        //this.addGroup(board.getBackground());
        //this.addGroup(board.getForground());
        this.boards[board.getX()][board.getY()] = board;
    }
        
    public void update(long elapsedTime) {
        super.update(elapsedTime);
        this.boards[x][y].update(elapsedTime);
        this.menu.update(elapsedTime);
    }
    
    public void render(Graphics2D g) {
        super.render(g);
        this.boards[x][y].render(g); 
        for (int i=0; i<this.ennemies[x][y].size(); i++) {
        	this.ennemies[x][y].get(i).render(g);
        }
        this.menu.render(g);
    }
}

package zelda.scenary;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;

import zelda.Zelda;

import com.golden.gamedev.object.Sprite;
import com.golden.gamedev.object.SpriteGroup;

public class QuestMenu {
    
    private SpriteGroup sprites;
    private Sprite[] coeurRouge;
    private Sprite[] coeurBleu;
    
    
    private Zelda game;
    
    public QuestMenu(Zelda game) {
        this.game = game;
        this.sprites = new SpriteGroup("");
        this.sprites.add(new Sprite(this.game.getImage("res/sprites/B_CASE.GIF"), 330, 30));
        this.sprites.add(new Sprite(this.game.getImage("res/sprites/A_CASE.GIF"), 400, 30));
        this.sprites.add(new Sprite(this.game.getImage("res/sprites/LIFE.GIF"), 500, 30));
        this.sprites.add(new Sprite(this.game.getImage("res/sprites/BOMB.GIF"), 230, 79));
        this.sprites.add(new Sprite(this.game.getImage("res/sprites/X.GIF"), 250, 80));
        this.sprites.add(new Sprite(this.game.getImage("res/sprites/KEY.GIF"), 230, 60));
        this.sprites.add(new Sprite(this.game.getImage("res/sprites/X.GIF"), 250, 60));
        this.sprites.add(new Sprite(this.game.getImage("res/sprites/PIECE.GIF"), 230, 30));
        this.coeurRouge= new Sprite[] {(new Sprite(this.game.getImage("res/sprites/X.GIF"), 250, 30)),
        	(new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/ORH.GIF").getScaledInstance(25,35,1)), 480, 55)),
        	(new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/ORH.GIF").getScaledInstance(25,35,1)), 520, 55)),
        	(new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/ORH.GIF").getScaledInstance(25,35,1)), 560, 55)),
        	(new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/ORH.GIF").getScaledInstance(25,35,1)), 600, 55)),
        	(new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/ORH.GIF").getScaledInstance(25,35,1)), 480, 90)),
        	(new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/ORH.GIF").getScaledInstance(25,35,1)), 520, 90)),
        	(new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/ORH.GIF").getScaledInstance(25,35,1)), 560, 90)),
        	(new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/ORH.GIF").getScaledInstance(25,35,1)), 600, 90))};
        this.coeurBleu= new Sprite[] {(new Sprite(this.game.getImage("res/sprites/X.GIF"), 250, 30)),
            (new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/OBH.GIF").getScaledInstance(25,35,1)), 480, 55)),
            (new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/OBH.GIF").getScaledInstance(25,35,1)), 520, 55)),
            (new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/OBH.GIF").getScaledInstance(25,35,1)), 560, 55)),
            (new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/OBH.GIF").getScaledInstance(25,35,1)), 600, 55)),
            (new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/OBH.GIF").getScaledInstance(25,35,1)), 480, 90)),
            (new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/OBH.GIF").getScaledInstance(25,35,1)), 520, 90)),
            (new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/OBH.GIF").getScaledInstance(25,35,1)), 560, 90)),
            (new Sprite(QuestMenu.toBufferedImage(this.game.getImage("res/sprites/Objects/OBH.GIF").getScaledInstance(25,35,1)), 600, 90))};
        
    }
    
    public static BufferedImage toBufferedImage(Image img)
    {
        if (img instanceof BufferedImage)
        {
            return (BufferedImage) img;
        }

        // Create a buffered image with transparency
        BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        // Draw the image on to the buffered image
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        // Return the buffered image
        return bimage;
    }

    public void move(long elapsedTime, boolean flag) {
        Sprite[] s = this.sprites.getSprites();
        for (int i = 0; i < this.sprites.getSize(); i++) {
            if (flag) 
                s[i].moveTo(elapsedTime, s[i].getX(), s[i].getY() + 300, 1);
            else 
                s[i].moveTo(elapsedTime, s[i].getX(), s[i].getY() - 300, 1);
        }
        
    }
    
    public void update(long elapsedTime) {
    	int life = (int) Math.ceil(this.game.getLink().getLife()/2);
    	for (int i=0; i<coeurRouge.length; i++) {
    		if (i<=life) {
    			this.sprites.add(this.coeurRouge[i]);
    		}
    		else {
    			this.sprites.add(this.coeurBleu[i]);
    		}
    	}
        this.sprites.update(elapsedTime);
    }
    
    public void render(Graphics2D g) {
        this.sprites.render(g);
    }
    
     
    
}

package zelda;

import com.golden.gamedev.object.CollisionManager;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;

import zelda.enemies.Ennemies;
import zelda.scenary.Quest;
import zelda.scenary.Rock;


import com.golden.gamedev.Game;
import com.golden.gamedev.GameLoader;
import com.golden.gamedev.object.Sprite;
import com.golden.gamedev.object.SpriteGroup;
import com.golden.gamedev.object.collision.AdvanceCollisionGroup;

public class Zelda extends Game {
    
    private Link link;
   
    private Quest quest;
    
    private Ennemies ennemi;
    
    private boolean menu;
    
    
    public Zelda() {
        
    }
    private Rock rock;
    
    
    public Link getLink() {return this.link;}
    
    public void initResources() {
        this.quest = new Quest(this);
        SpriteGroup enemyGroup = new SpriteGroup("enemyGroup");
        this.link = new Link(this);
        this.link.ennemies=enemyGroup;
        this.link.setBoard(this.quest.getCurrentBoard());  
    }
    
    
    
    public Boolean SortTableau() {
    	if (this.link.getX()<0 || this.link.getX()>672 || this.link.getY()<126 || this.link.getY()>588) {
    	return true;
    	}else return false;
    }
        
    public void update(long elapsedTime) {
        if (this.keyPressed(KeyEvent.VK_ALT)) {
            this.link.fight();
        } else if (this.keyDown(KeyEvent.VK_LEFT)) {
            this.link.walk(Orientation.WEST);
        } else if (this.keyDown(KeyEvent.VK_RIGHT)) {
            this.link.walk(Orientation.EAST);
        } else if (this.keyDown(KeyEvent.VK_UP)) {
            this.link.walk(Orientation.NORTH);
        } else if (this.keyDown(KeyEvent.VK_DOWN)) {
            this.link.walk(Orientation.SOUTH);
        } else if (keyPressed(KeyEvent.VK_ESCAPE)) {
            finish();
        } else {
            this.link.setSpeed(0, 0);
        }
        this.quest.update(elapsedTime);
        this.link.update(elapsedTime);
        if(this.link.meurt()) System.out.println("dead");
        if(this.SortTableau()) {
        	
        	System.out.println(quest.getX() + "," + quest.getY());
        	System.out.println(link.getX() + "," + link.getY() + ": " + SortTableau());
        	switch(this.link.getOrientation()) {
        	case WEST:
        		this.link.setLocation(671, this.link.getY());
        		this.quest.changeBoard(this.quest.getX()-1, this.quest.getY());
        		break;
        	case EAST:
        		this.link.setLocation(1, this.link.getY());
        		this.quest.changeBoard(this.quest.getX()+1, this.quest.getY());
        		break;
        	case NORTH:
        		this.link.setLocation(this.link.getX(),587);
        		this.quest.changeBoard(this.quest.getX(), this.quest.getY()-1);
        		break;
        	case SOUTH:
        		this.link.setLocation(this.link.getX(),137);
        		this.quest.changeBoard(this.quest.getX(), this.quest.getY()+1);
        		break;
        	}
        	this.link.setBoard(this.quest.getCurrentBoard());
        }
        
     
    }

    public void render(Graphics2D g) {
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        this.quest.render(g);
        this.link.render(g);
    
        
        
    }
    
    
    
    
    public static void main(String[] args) {
        GameLoader game = new GameLoader();
        game.setup(new Zelda(), new Dimension(672,588), false);
        game.start();
    }
    
}
