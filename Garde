package zelda.enemies;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

import com.golden.gamedev.Game;
import com.golden.gamedev.object.Sprite;
import com.golden.gamedev.object.SpriteGroup;
import com.golden.gamedev.object.Timer;
import com.golden.gamedev.object.collision.AdvanceCollisionGroup;

import zelda.Link;
import zelda.Orientation;
import zelda.Zelda;
import zelda.enemies.Ennemies.EnnemiesCollisionManager;
import zelda.enemies.Ennemies.EnnemiesEnnemyCollisionManager;
import zelda.scenary.Board;

public class Garde extends Ennemies {
	
	public Garde(Zelda game, double x, double y) {
        this.setGame(game);
       this.getAnimationTimer().setDelay(Ennemies.ANIMATION_DELAY);
       this.figth = new Timer(Ennemies.FIGHT_TIMER);
        this.figth.setActive(false);
        this.SPEED = 0.1; // lentement
        this.orientation=Orientation.SOUTH;
        this.ennemiesEnnemy= new EnnemiesEnnemyCollisionManager();
        this.manager = new EnnemiesCollisionManager();
        this.life = 5; // admettons
        this.initResources(x,y);
    }
	
	public Orientation getOrientation() {
    	return this.orientation;
    }
	
	

	private void initResources(double x, double y) {
		BufferedImage[] sprites = new BufferedImage[8];
        sprites[0] = Ennemies.toBufferedImage(getGame().getImage("res/sprites/Ennemies/gardebas1.png").getScaledInstance(35, 25, 15));
        sprites[1] = Ennemies.toBufferedImage(getGame().getImage("res/sprites/Ennemies/gardebas2.png").getScaledInstance(35, 25, 15));
        sprites[2] = Ennemies.toBufferedImage(getGame().getImage("res/sprites/Ennemies/gardehaut1.png").getScaledInstance(35, 25, 15));
        sprites[3] = Ennemies.toBufferedImage(getGame().getImage("res/sprites/Ennemies/gardehaut2.png").getScaledInstance(35, 25, 15));
        sprites[4] = Ennemies.toBufferedImage(getGame().getImage("res/sprites/Ennemies/gardebas1.png").getScaledInstance(35, 25, 15));
        sprites[5] = Ennemies.toBufferedImage(getGame().getImage("res/sprites/Ennemies/gardebas2.png").getScaledInstance(35, 25, 15));
        sprites[6] = Ennemies.toBufferedImage(getGame().getImage("res/sprites/Ennemies/gardehaut1.png").getScaledInstance(35, 25, 15));
        sprites[7] = Ennemies.toBufferedImage(getGame().getImage("res/sprites/Ennemies/gardehaut2.png").getScaledInstance(35, 25, 15));
        this.setImages(sprites);
        this.setLocation(x, y);
        this.setAnimationFrame(0, 0);
    }

	
	public void update(long elapsedTime) {
        super.update(elapsedTime);
        
        if (this.figth.action(elapsedTime)) {
            this.figth.setActive(false); 
            
            System.out.println("in crabe");
            if (this.orientation.equals(Orientation.EAST)) {
                this.setX(this.getX() + 15);
                this.setAnimationFrame(0, 1);
             
            } else if (this.orientation.equals(Orientation.WEST)) {
                this.setX(this.getX() - 15);
                this.setAnimationFrame(1, 0);
            }
      
            if (this.SortTableau()) {
            	this.setX(this.getOldX());
            	this.setY(this.getOldY());
            } 

         if (this.manager != null) 
                this.manager.checkCollision();
        } 
            
        Board lb = this.game.getLink().getBoard();
        Board b = this.getBoard();
        System.out.println("link board: " + lb.getX() + ", " + lb.getY() ); 
        System.out.println("crabe board: " + b.getX() + ", " + b.getY() ); 
         if(this.game.getLink().getBoard()==this.getBoard())    {
         ai();   
         System.out.println("in crabe ai");
         
         }
            
        }
            
            
            
            


public void ai() {
	
	this.manager.checkCollision();
	
	 if (this.orientation == Orientation.NORTH) {
         this.setAnimationFrame(0, 1);
         this.haut();
      
     } else if (this.orientation == Orientation.SOUTH) {
         this.setAnimationFrame(1, 0);
         this.bas();
     }
 }


public void changeOrientation() {
    if (this.orientation == Orientation.SOUTH) {
        this.orientation = Orientation.NORTH;
    } else {
        this.orientation = Orientation.SOUTH;
    }
}


protected class EnnemiesCollisionManager extends AdvanceCollisionGroup {
    public EnnemiesCollisionManager() {
        this.pixelPerfectCollision = false;
    }
    
  /*  public void collided(Sprite s1, Sprite s2) {
        this.revertPosition1();
        zelda.enemies.Ennemies Sennemi = (zelda.enemies.Ennemies) s1;
        if(Sennemi.getOrientation() == Orientation.WEST) {
        	Sennemi.setOrientation(Orientation.EAST);
        }  if(Sennemi.getOrientation() == Orientation.EAST) {
        	Sennemi.setOrientation(Orientation.WEST);
    }*/
    
    public void collided(Sprite s1, Sprite s2) {
    	this.revertPosition1();
    	if (s1 instanceof Garde) {
            Garde garde = (Garde) s1;
            garde.changeOrientation();
        }
    
    
    

    } 
        
}
	 public void render(Graphics2D g) {
	        super.render(g);

	    }


	@Override
	public void fight(Board board,Link link) {
		// TODO Auto-generated method stub
		System.out.println("fight");
	}

}

	
	

	 

